name: Generate Report (Dev)

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths:
      - '**.py'
      - '.github/workflows/GenerateReport-Dev.yml'
      - '.github/workflows/PythonSetup/**'
      - '.github/workflows/RcloneSetup/**'
      - '.env'
      - 'src/**'
      - 'requirements.txt'
      - 'templates/**'
      - 'utils/**'

permissions:
  contents: write

jobs:
  healthcheck:
    name: Health Check
    runs-on: ubuntu-latest
    environment: WT_WeeklyTriggerEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call setup-python
        id: setup-python
        uses: ./.github/workflows/PythonSetup

      - name: DEBUG - Check pip health
        run: |
          pip --version
          python -c "import pip._vendor.resolvelib; print(pip._vendor.resolvelib.__file__)"

      - name: DEBUG - Print config.env
        run: grep -E '^(FULL_RELOAD_PACKAGES|BASE_PACKAGE_CSV|REQUIREMENTS_FILE)=' .env || true

      - name: Set up rclone
        uses: ./.github/workflows/RcloneSetup
        with:
          rclone_conf_base64: ${{ secrets.RCLONE_CONF_BASE64 }}

      - name: DEBUG - Check rclone connection
        run: rclone lsd gdrive:/Geek/PythonPackageManager/WeeklyReports/

  generate-report:
    name: Generate Weekly Report
    runs-on: ubuntu-latest
    needs: healthcheck
    environment: WT_WeeklyTriggerEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call setup-python
        id: setup-python
        uses: ./.github/workflows/PythonSetup

      - name: Install mutt (only on GitHub-hosted runners)
        if: contains(runner.labels, 'self-hosted') == false
        run: |
          sudo apt-get update
          sudo apt-get install -y mutt

      - name: DEBUG - Check pip health
        run: |
          pip --version
          python -c "import pip._vendor.resolvelib; print(pip._vendor.resolvelib.__file__)"

      - name: DEBUG - Print config.env
        run: grep -E '^(FULL_RELOAD_PACKAGES|BASE_PACKAGE_CSV|REQUIREMENTS_FILE)=' .env || true

      - name: Run weekly report and extract personal report info
        id: run_report
        run: |
          output=$(python GenerateReport.py | tee /dev/stderr)

          summary_path="temp/PersonalReportSummary.txt"
          echo "üìÑ Using fixed summary path: $summary_path"

          if [[ ! -f "$summary_path" ]]; then
            echo "‚ö†Ô∏è Summary file not found. No packages to upgrade."
            echo "UPGRADE_COUNT=0" >> $GITHUB_ENV
            echo "UPGRADE_PKG_LIST=" >> $GITHUB_ENV
          else
            count=$(grep -oP '^UPGRADE_COUNT=\K\d+' "$summary_path")
            pkgs=$(awk '/^PACKAGE_LIST:/ {flag=1; next} /^$/ {flag=0} flag' "$summary_path")
            echo "UPGRADE_COUNT=$count" >> $GITHUB_ENV
            echo "UPGRADE_PKG_LIST<<EOF" >> $GITHUB_ENV
            echo "$pkgs" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: DEBUG - Show changed files
        run: |
          git status
          git diff --name-only

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add WeeklyReport/* || true
          git commit -m "üìù Update WeeklyReport on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in WeeklyReport"

          git add MonthlyReport/* || true
          git commit -m "üìä Update MonthlyReport on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in MonthlyReport"

          git add src/BasePackageWithDependencies.csv || true
          git commit -m "üì¶ Update BasePackageWithDependencies on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in BasePackageWithDependencies"

          # Pull remote changes before pushing to avoid non-fast-forward errors
          git fetch origin ${{ github.ref_name }}
          git rebase origin/${{ github.ref_name }} || {
            echo "‚ùå Rebase failed due to conflict. Please resolve manually."
            exit 1
          }

          git push origin HEAD:${{ github.ref_name }} || {
            echo "‚ùå Push failed. Someone else may have pushed changes. Please re-run the workflow."
            exit 1
          }
