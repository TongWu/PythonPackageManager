name: Generate Report (Dev)

on:
  workflow_dispatch:
  push:
    branches:
      - dev
    paths:
      - '**.py'
      - '.github/workflows/GenerateReport-Dev.yml'
      - '.github/workflows/PythonSetup/**'
      - '.github/workflows/RcloneSetup/**'
      - '.env'
      - 'src/**'
      - 'requirements.txt'
      - 'templates/**'
      - 'utils/**'

permissions:
  contents: write

jobs:
  healthcheck:
    name: Health Check
    runs-on: self-hosted
    environment: WT_WeeklyTriggerEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call setup-python
        id: setup-python
        uses: ./.github/workflows/PythonSetup

      - name: DEBUG - Check pip health
        run: |
          pip --version
          python -c "import pip._vendor.resolvelib; print(pip._vendor.resolvelib.__file__)"

      - name: DEBUG - Print config.env
        run: grep -E '^(FULL_RELOAD_PACKAGES|BASE_PACKAGE_CSV|REQUIREMENTS_FILE)=' .env || true

      - name: Set up rclone
        uses: ./.github/workflows/RcloneSetup
        with:
          rclone_conf_base64: ${{ secrets.RCLONE_CONF_BASE64 }}

      - name: DEBUG - Check rclone connection
        run: rclone lsd gdrive:/Geek/PythonPackageManager/WeeklyReports/

  generate-report:
    name: Generate Weekly Report
    runs-on: self-hosted
    needs: healthcheck
    environment: WT_WeeklyTriggerEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call setup-python
        id: setup-python
        uses: ./.github/workflows/PythonSetup

      - name: DEBUG - Check pip health
        run: |
          pip --version
          python -c "import pip._vendor.resolvelib; print(pip._vendor.resolvelib.__file__)"

      - name: DEBUG - Print config.env
        run: grep -E '^(FULL_RELOAD_PACKAGES|BASE_PACKAGE_CSV|REQUIREMENTS_FILE)=' .env || true

      - name: Run weekly report script
        run: python GenerateReport.py

      - name: DEBUG - Show changed files
        run: |
          git status
          git diff --name-only

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add WeeklyReport/* || true
          git commit -m "üìù Update WeeklyReport on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in WeeklyReport"

          git add MonthlyReport/* || true
          git commit -m "üìä Update MonthlyReport on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in MonthlyReport"

          git add src/BasePackageWithDependencies.csv || true
          git commit -m "üì¶ Update BasePackageWithDependencies on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in BasePackageWithDependencies"

          # Pull remote changes before pushing to avoid non-fast-forward errors
          git fetch origin ${{ github.ref_name }}
          git rebase origin/${{ github.ref_name }} || {
            echo "‚ùå Rebase failed due to conflict. Please resolve manually."
            exit 1
          }

          git push origin HEAD:${{ github.ref_name }} || {
            echo "‚ùå Push failed. Someone else may have pushed changes. Please re-run the workflow."
            exit 1
          }

  upload-report:
    name: Upload to Google Drive
    runs-on: self-hosted
    environment: WT_WeeklyTriggerEnv
    needs: generate-report
    steps:
      - name: Checkout latest commit from main
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}
          git fetch origin main
          git checkout origin/main

      - name: Set up rclone
        uses: ./.github/workflows/RcloneSetup
        with:
          rclone_conf_base64: ${{ secrets.RCLONE_CONF_BASE64 }}

      - name: DEBUG - Check rclone connection
        run: rclone lsd gdrive:/Geek/PythonPackageManager/WeeklyReports/

      - name: Upload Weekly Report to Google Drive
        run: |
          set +e  # Allow script to continue even if rclone fails
      
          echo "üì§ Start uploading via rclone..."
          OUTPUT=$(rclone copy WeeklyReport gdrive:/Geek/PythonPackageManager/WeeklyReports/ \
            --create-empty-src-dirs \
            --verbose \
            --checkers=8 \
            --stats=10s \
            --no-update-modtime \
            2>&1)
          STATUS=$?
      
          echo "$OUTPUT"
      
          if [[ $STATUS -ne 0 ]]; then
            if echo "$OUTPUT" | grep -q "403: User rate limit exceeded"; then
              echo "‚ö†Ô∏è Rclone hit user rate limit (403), but continuing anyway."
              exit 0
            else
              echo "‚ùå Rclone failed with non-recoverable error."
              exit $STATUS
            fi
          else
            echo "‚úÖ Rclone upload completed successfully."
          fi

      - name: Upload Monthly Report to Google Drive
        run: |
          set +e  # Allow script to continue even if rclone fails
      
          echo "üì§ Start uploading via rclone..."
          OUTPUT=$(rclone copy MonthlyReport gdrive:/Geek/PythonPackageManager/MonthlyReports/ \
            --create-empty-src-dirs \
            --verbose \
            --checkers=8 \
            --stats=10s \
            --no-update-modtime \
            2>&1)
          STATUS=$?
      
          echo "$OUTPUT"
      
          if [[ $STATUS -ne 0 ]]; then
            if echo "$OUTPUT" | grep -q "403: User rate limit exceeded"; then
              echo "‚ö†Ô∏è Rclone hit user rate limit (403), but continuing anyway."
              exit 0
            else
              echo "‚ùå Rclone failed with non-recoverable error."
              exit $STATUS
            fi
          else
            echo "‚úÖ Rclone upload completed successfully."
          fi
