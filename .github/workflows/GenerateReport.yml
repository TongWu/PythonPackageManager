name: Generate Report

on:
  schedule:
    - cron: '0 0 * * MON,THU'
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - '**.yml'
      - '.env'
      - 'src/**'

permissions:
  contents: write

jobs:
  precheck:
    name: Pre-Check for Python and Rclone
    runs-on: ubuntu-latest
    environment: WT_WeeklyTriggerEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call setup-python
        id: setup-python
        uses: ./.github/workflows/PythonSetup

      - name: DEBUG - Check pip health
        run: |
          pip --version
          python -c "import pip._vendor.resolvelib; print(pip._vendor.resolvelib.__file__)"

      - name: DEBUG - Print config.env
        run: grep -E '^(FULL_RELOAD_PACKAGES|BASE_PACKAGE_CSV|REQUIREMENTS_FILE)=' .env || true

      - name: Set up rclone
        uses: ./.github/workflows/RcloneSetup
        with:
          rclone_conf_base64: ${{ secrets.RCLONE_CONF_BASE64 }}

      - name: DEBUG - Check rclone connection
        run: rclone lsd gdrive:/Geek/PythonPackageManager/WeeklyReports/

      - name: Upload to Google Drive
        run: |
          rclone copy WeeklyReport gdrive:/Geek/PythonPackageManager/WeeklyReports/ --create-empty-src-dirs --verbose --checkers=8 --stats=10s

  generate-report:
    name: Generate Weekly Report
    runs-on: ubuntu-latest
    needs: precheck
    environment: WT_WeeklyTriggerEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call setup-python
        id: setup-python
        uses: ./.github/workflows/PythonSetup

      - name: DEBUG - Check pip health
        run: |
          pip --version
          python -c "import pip._vendor.resolvelib; print(pip._vendor.resolvelib.__file__)"

      - name: DEBUG - Print config.env
        run: grep -E '^(FULL_RELOAD_PACKAGES|BASE_PACKAGE_CSV|REQUIREMENTS_FILE)=' .env || true

      - name: Run weekly report script
        run: python GenerateReport.py

      - name: DEBUG - Show changed files
        run: |
          git status
          git diff --name-only

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add WeeklyReport/* || true
          git commit -m "üìù Update WeeklyReport on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in WeeklyReport"

          git add src/BasePackageWithDependencies.csv || true
          git commit -m "üì¶ Update BasePackageWithDependencies on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in BasePackageWithDependencies"

          # Pull remote changes before pushing to avoid non-fast-forward errors
          git fetch origin ${{ github.ref_name }}
          git rebase origin/${{ github.ref_name }} || {
            echo "‚ùå Rebase failed due to conflict. Please resolve manually."
            exit 1
          }

          git push origin HEAD:${{ github.ref_name }} || {
            echo "‚ùå Push failed. Someone else may have pushed changes. Please re-run the workflow."
            exit 1
          }

  upload-report:
    name: Upload to Google Drive
    runs-on: ubuntu-latest
    environment: WT_WeeklyTriggerEnv
    needs: generate-report
    steps:
      - name: Checkout latest commit from main
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}
          git fetch origin main
          git checkout origin/main

      - name: Set up rclone
        uses: ./.github/workflows/RcloneSetup
        with:
          rclone_conf_base64: ${{ secrets.RCLONE_CONF_BASE64 }}

      - name: DEBUG - Check rclone connection
        run: rclone lsd gdrive:/Geek/PythonPackageManager/WeeklyReports/

      - name: Upload to Google Drive
        run: |
          rclone copy WeeklyReport gdrive:/Geek/PythonPackageManager/WeeklyReports/ --create-empty-src-dirs --verbose --checkers=8 --stats=10s

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: generate-report
    if: success()

    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Checkout latest commit from main
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}
          git fetch origin main
          git checkout origin/main

      - name: Find latest report set
        id: find_latest
        run: |
          echo "üìÅ Scanning for latest report set..."
          latest_json=$(find WeeklyReport -type f -name "WeeklyReport_*.json" | \
            sed -E 's/\.json$//' | \
            sort -t '_' -k2 | \
            tail -n 1).json

          if [[ -z "$latest_json" || ! -f "$latest_json" ]]; then
            echo "‚ùå No valid JSON report found."
            exit 1
          fi

          base_name="${latest_json%.json}"
          csv_file="${base_name}.csv"
          html_file="${base_name}.html"

          echo "üìù Latest base: $base_name"
          echo "üìÑ CSV:  $csv_file"
          echo "üìÑ HTML: $html_file"
          echo "üìÑ JSON: $latest_json"

          echo "CSV_PATH=$csv_file" >> $GITHUB_ENV
          echo "HTML_PATH=$html_file" >> $GITHUB_ENV
          echo "JSON_PATH=$latest_json" >> $GITHUB_ENV

          tag="weekly-$(basename "$base_name" | sed -E 's/^WeeklyReport_//')"
          echo "RELEASE_TAG=$tag" >> $GITHUB_ENV
          echo "release_tag=$tag" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: "Weekly Report - ${{ env.RELEASE_TAG }}"
          draft: false
          prerelease: false

      - name: Upload CSV Report
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.CSV_PATH }}
          asset_name: ${CSV_PATH##*/}
          asset_content_type: text/csv

      - name: Upload HTML Report
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.HTML_PATH }}
          asset_name: ${HTML_PATH##*/}
          asset_content_type: text/html

      - name: Upload JSON Report
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.JSON_PATH }}
          asset_name: ${JSON_PATH##*/}
          asset_content_type: application/json

      - name: Remove old release in same week
        run: |
          WEEK_PREFIX=$(echo "${{ env.RELEASE_TAG }}" | sed -E 's/^weekly-([0-9]{8}).*/\1/')
          echo "üßπ Will cleanup previous releases in the same week: $WEEK_PREFIX"

          # List all weekly releases
          gh release list --limit 100 --json tagName --jq '.[].tagName' | \
            grep "^weekly-$WEEK_PREFIX" | \
            grep -v "${{ env.RELEASE_TAG }}" | \
            while read old_tag; do
              echo "üóëÔ∏è Deleting old release and tag: $old_tag"
              gh release delete "$old_tag" --yes || echo "‚ö†Ô∏è Failed to delete release $old_tag"
              gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/$old_tag" || echo "‚ö†Ô∏è Failed to delete tag ref $old_tag"
            done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
