name: Generate Report

on:
  schedule:
    - cron: '0 0 * * MON,THU'
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - '.github/workflows/GenerateReport.yml'
      - '.github/workflows/PythonSetup/**'
      - '.github/workflows/RcloneSetup/**'
      - '.env'
      - 'src/**'
      - 'requirements.txt'
      - 'templates/**'
      - 'utils/**'

permissions:
  contents: write

jobs:
  healthcheck:
    name: Health Check
    runs-on: ubuntu-latest
    environment: WT_WeeklyTriggerEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call setup-python
        id: setup-python
        uses: ./.github/workflows/PythonSetup

      - name: DEBUG - Check pip health
        run: |
          pip --version
          python -c "import pip._vendor.resolvelib; print(pip._vendor.resolvelib.__file__)"

      - name: DEBUG - Print config.env
        run: grep -E '^(FULL_RELOAD_PACKAGES|BASE_PACKAGE_CSV|REQUIREMENTS_FILE)=' .env || true

      - name: Set up rclone
        uses: ./.github/workflows/RcloneSetup
        with:
          rclone_conf_base64: ${{ secrets.RCLONE_CONF_BASE64 }}

      - name: DEBUG - Check rclone connection
        run: rclone lsd gdrive:/Geek/PythonPackageManager/WeeklyReports/

  generate-report:
    name: Generate Weekly Report
    runs-on: self-hosted
    needs: healthcheck
    environment: WT_WeeklyTriggerEnv
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Call setup-python
        id: setup-python
        uses: ./.github/workflows/PythonSetup

      - name: DEBUG - Check pip health
        run: |
          pip --version
          python -c "import pip._vendor.resolvelib; print(pip._vendor.resolvelib.__file__)"

      - name: DEBUG - Print config.env
        run: grep -E '^(FULL_RELOAD_PACKAGES|BASE_PACKAGE_CSV|REQUIREMENTS_FILE)=' .env || true

      - name: Run weekly report script
        run: python GenerateReport.py

      - name: DEBUG - Show changed files
        run: |
          git status
          git diff --name-only

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add WeeklyReport/* || true
          git commit -m "üìù Update WeeklyReport on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in WeeklyReport"

          git add MonthlyReport/* || true
          git commit -m "üìä Update MonthlyReport on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in MonthlyReport"

          git add src/BasePackageWithDependencies.csv || true
          git commit -m "üì¶ Update BasePackageWithDependencies on $(date '+%Y-%m-%d %H:%M')" || echo "No changes in BasePackageWithDependencies"

          # Pull remote changes before pushing to avoid non-fast-forward errors
          git fetch origin ${{ github.ref_name }}
          git rebase origin/${{ github.ref_name }} || {
            echo "‚ùå Rebase failed due to conflict. Please resolve manually."
            exit 1
          }

          git push origin HEAD:${{ github.ref_name }} || {
            echo "‚ùå Push failed. Someone else may have pushed changes. Please re-run the workflow."
            exit 1
          }

  upload-report:
    name: Upload to Google Drive
    runs-on: ubuntu-latest
    environment: WT_WeeklyTriggerEnv
    needs: generate-report
    steps:
      - name: Checkout latest commit from main
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}
          git fetch origin main
          git checkout origin/main

      - name: Set up rclone
        uses: ./.github/workflows/RcloneSetup
        with:
          rclone_conf_base64: ${{ secrets.RCLONE_CONF_BASE64 }}

      - name: DEBUG - Check rclone connection
        run: rclone lsd gdrive:/Geek/PythonPackageManager/WeeklyReports/

      - name: Upload Weekly Report to Google Drive
        run: |
          set +e  # Allow script to continue even if rclone fails
      
          echo "üì§ Start uploading via rclone..."
          OUTPUT=$(rclone copy WeeklyReport gdrive:/Geek/PythonPackageManager/WeeklyReports/ \
            --create-empty-src-dirs \
            --verbose \
            --checkers=8 \
            --stats=10s \
            --no-update-modtime \
            2>&1)
          STATUS=$?
      
          echo "$OUTPUT"
      
          if [[ $STATUS -ne 0 ]]; then
            if echo "$OUTPUT" | grep -q "403: User rate limit exceeded"; then
              echo "‚ö†Ô∏è Rclone hit user rate limit (403), but continuing anyway."
              exit 0
            else
              echo "‚ùå Rclone failed with non-recoverable error."
              exit $STATUS
            fi
          else
            echo "‚úÖ Rclone upload completed successfully."
          fi

      - name: Upload Monthly Report to Google Drive
        run: |
          set +e  # Allow script to continue even if rclone fails
      
          echo "üì§ Start uploading via rclone..."
          OUTPUT=$(rclone copy MonthlyReport gdrive:/Geek/PythonPackageManager/MonthlyReports/ \
            --create-empty-src-dirs \
            --verbose \
            --checkers=8 \
            --stats=10s \
            --no-update-modtime \
            2>&1)
          STATUS=$?
      
          echo "$OUTPUT"
      
          if [[ $STATUS -ne 0 ]]; then
            if echo "$OUTPUT" | grep -q "403: User rate limit exceeded"; then
              echo "‚ö†Ô∏è Rclone hit user rate limit (403), but continuing anyway."
              exit 0
            else
              echo "‚ùå Rclone failed with non-recoverable error."
              exit $STATUS
            fi
          else
            echo "‚úÖ Rclone upload completed successfully."
          fi

  create-monthly-release:
    name: Create Monthly Report Release
    runs-on: ubuntu-latest
    environment: WT_WeeklyTriggerEnv
    needs: generate-report
    if: success()
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Checkout latest commit from main
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}
          git fetch origin main
          git checkout origin/main

      - name: Find latest monthly report
        id: find_latest_monthly
        run: |
          echo "üîç Scanning for latest MonthlyReport..."
          latest_file=$(find MonthlyReport -type f -name "MonthlyReport-*.xlsx" | sort | tail -n 1)

          if [[ -z "$latest_file" || ! -f "$latest_file" ]]; then
            echo "‚ùå No monthly report found."
            exit 1
          fi

          echo "‚úÖ Found: $latest_file"

          filename=$(basename "$latest_file")
          year_month=$(echo "$filename" | grep -oP '(?<=MonthlyReport-)[0-9]{6}')

          echo "üì¶ Scanning existing monthly tags with prefix: monthly-${year_month}-Ver"

          existing_tags=$(gh release list --limit 100 --json tagName | jq -r ".[] | .tagName" | grep -E "^monthly-${year_month}-Ver[0-9]+$" || true)

          max_ver=$(echo "$existing_tags" | grep -oE 'Ver[0-9]+' | sed 's/Ver//' | sort -n | tail -n 1)

          if [[ -z "$max_ver" ]]; then
            new_ver=1
          else
            new_ver=$((max_ver + 1))
          fi

          tag="monthly-${year_month}-Ver${new_ver}"
          echo "üÜï New tag: $tag"

          echo "RELEASE_TAG=$tag" >> $GITHUB_ENV
          echo "REPORT_FILE=$latest_file" >> $GITHUB_ENV
          echo "REPORT_NAME=$filename" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Create GitHub Release
        run: |
          gh release create "$RELEASE_TAG" \
            "$REPORT_FILE#${REPORT_NAME}" \
            --title "Monthly Report - $RELEASE_TAG" \
            --notes "Automated monthly report"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Remove old releases for the same month
        run: |
          echo "üßπ Cleaning up other releases for the same month..."

          current_month_prefix=$(echo "${{ env.RELEASE_TAG }}" | grep -oP 'monthly-\K[0-9]{6}')

          gh release list --limit 100 --json tagName | \
            jq -r '.[] | .tagName' | \
            grep -E "^monthly-${current_month_prefix}-Ver[0-9]+$" | \
            while read tag; do
              if [[ "$tag" == "${{ env.RELEASE_TAG }}" ]]; then
                echo "‚è≠Ô∏è Skipping current release: $tag"
                continue
              fi

              echo "üóëÔ∏è Deleting old release: $tag"
              gh release delete "$tag" --yes || echo "‚ö†Ô∏è Failed to delete release $tag"

              echo "üîç Checking for tag ref: $tag"
              if gh api repos/${{ github.repository }}/git/refs/tags/"$tag" > /dev/null 2>&1; then
                echo "üîñ Tag $tag exists. Deleting..."
                gh api -X DELETE repos/${{ github.repository }}/git/refs/tags/"$tag" || echo "‚ö†Ô∏è Failed to delete tag ref $tag"
              else
                echo "‚ÑπÔ∏è Tag $tag does not exist or already deleted."
              fi
            done
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}


  create-weekly-release:
    name: Create Weekly Report Release
    runs-on: ubuntu-latest
    environment: WT_WeeklyTriggerEnv
    needs: create-monthly-release
    if: success()

    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Checkout latest commit from main
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}
          git fetch origin main
          git checkout origin/main

      - name: Find latest report set
        id: find_latest
        run: |
          echo "üìÅ Scanning for latest report set..."
          latest_json=$(find WeeklyReport -type f -name "WeeklyReport_*.json" | \
            sed -E 's/\.json$//' | \
            sort -t '_' -k2 | \
            tail -n 1).json

          if [[ -z "$latest_json" || ! -f "$latest_json" ]]; then
            echo "‚ùå No valid JSON report found."
            exit 1
          fi

          base_name="${latest_json%.json}"
          csv_file="${base_name}.csv"
          html_file="${base_name}.html"

          echo "üìù Latest base: $base_name"
          echo "üìÑ CSV:  $csv_file"
          echo "üìÑ HTML: $html_file"
          echo "üìÑ JSON: $latest_json"

          echo "CSV_PATH=$csv_file" >> $GITHUB_ENV
          echo "HTML_PATH=$html_file" >> $GITHUB_ENV
          echo "JSON_PATH=$latest_json" >> $GITHUB_ENV

          echo "CSV_FILENAME=$(basename "$csv_file")" >> $GITHUB_ENV
          echo "HTML_FILENAME=$(basename "$html_file")" >> $GITHUB_ENV
          echo "JSON_FILENAME=$(basename "$latest_json")" >> $GITHUB_ENV

          # üóìÔ∏è Get the Monday of current week
          MONDAY_DATE=$(date -d "$(date +%Y-%m-%d -d @$(( $(date +%s) - ($(date +%u) - 1) * 86400 )))" +%Y%m%d)
          echo "üìÖ This week's Monday: $MONDAY_DATE"

          # üîç Find existing tags in this week and determine Ver{x}
          existing_tags=$(gh release list --limit 100 --json tagName | jq -r ".[] | .tagName" | grep -E "^weekly-${MONDAY_DATE}-Ver[0-9]+$" || true)
          max_ver=$(echo "$existing_tags" | grep -oE 'Ver[0-9]+' | sed 's/Ver//' | sort -n | tail -n 1)

          if [[ -z "$max_ver" ]]; then
            new_ver=1
          else
            new_ver=$((max_ver + 1))
          fi

          tag="weekly-${MONDAY_DATE}-Ver${new_ver}"
          echo "üÜï Release tag: $tag"

          echo "RELEASE_TAG=$tag" >> $GITHUB_ENV
          echo "release_tag=$tag" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Create GitHub Release
        run: |
          gh release create "$RELEASE_TAG" \
            "$CSV_PATH#${CSV_FILENAME}" \
            "$HTML_PATH#${HTML_FILENAME}" \
            "$JSON_PATH#${JSON_FILENAME}" \
            --title "Weekly Report - $RELEASE_TAG" \
            --notes "Automated weekly report"
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      - name: Remove old releases from last week (keep Ver1 and latest)
        run: |
          # ‚è±Ô∏è Calculate last Monday date
          LAST_MONDAY=$(date -d "last monday" +%Y%m%d)
          echo "üßπ Cleaning up releases from last week: $LAST_MONDAY"

          # üîç Find all tags that fits weekly-LAST_MONDAY-Ver{X}
          matching_tags=$(gh release list --limit 100 --json tagName,createdAt | \
            jq -r ".[] | select(.tagName | test(\"^weekly-${LAST_MONDAY}-Ver[0-9]+\")).tagName")

          if [[ -z "$matching_tags" ]]; then
            echo "‚ÑπÔ∏è No matching tags found for last week."
            exit 0
          fi

          echo "üîç All matching tags:"
          echo "$matching_tags"

          # Extract all tags
          versions=$(echo "$matching_tags" | sed -nE "s/^weekly-${LAST_MONDAY}-Ver([0-9]+)$/\1/p" | sort -n)

          # Get biggest ver
          max_ver=$(echo "$versions" | tail -n 1)
          echo "üÜï Max version: Ver$max_ver"

          for tag in $matching_tags; do
            ver=$(echo "$tag" | sed -nE "s/^weekly-${LAST_MONDAY}-Ver([0-9]+)$/\1/p")

            if [[ "$ver" == "1" || "$ver" == "$max_ver" ]]; then
              echo "‚úÖ Keeping $tag"
              continue
            fi

            echo "üóëÔ∏è Deleting $tag"
            gh release delete "$tag" --yes || echo "‚ö†Ô∏è Failed to delete release $tag"
            if git ls-remote --tags origin | grep -q "refs/tags/$tag$"; then
              echo "üîñ Tag $tag exists. Deleting..."
              gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/$tag" || echo "‚ö†Ô∏è Failed to delete tag ref $tag"
            else
              echo "‚ÑπÔ∏è Tag $tag does not exist. Skipping tag deletion."
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
